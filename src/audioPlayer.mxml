<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" minWidth="10" minHeight="10"
				applicationComplete="application1_applicationCompleteHandler(event)">
<mx:Script>
	<![CDATA[
		import flash.external.ExternalInterface;
		
		import mx.events.FlexEvent;
		import mx.events.VideoEvent;

		/**
		 * html5のaudioタグがmp4を扱えなかった場合に動作する動作
		 * 欲しい動作
		 * イベント編：
		 * 　loadeddata(データ読み込み完了時動作)
		 * 　play(再生開始時動作)
		 * 　pause(停止時動作)
		 * 　timeupdate(再生時間更新動作)
		 * 　ended(再生終了時動作)
		 * メソッド編：
		 * 　pause()(停止)
		 * 　play()(再生)
		 * 　addEventListener(イベント名, 関数)(javascriptイベント付加)
		 * 　removeEventListener(イベント名, 関数)(javascriptイベント削除)
		 * 　setAttribute("プロパティー名", 値)
		 * 　removeAttribute("プロパティー名")
		 * プロパティー編：
		 * 　playbackRate(再生速度(実装不可))
		 * 　src(再生URL)
		 * 　loaded(読み込み完了確認)
		 * 　paused(停止確認)
		 * 　currentTime(再生位置確認(参照時)とseek用(代入時))
		 * 　duration(データ長(参照時))
		 * 
		 * 　loop(繰り返しを実行するかどうか(ただしくはこれはDOMのプロパティー))
		 */
		protected function updateTime():void {
			ExternalInterface.call("audioPlayer.updateData", {
				currentTime: player.playheadTime,
				totalTime: player.totalTime,
				currentBytes: player.bytesLoaded,
				totalBytes: player.bytesTotal,
				isplaying: player.playing
			});
		}
		protected function updateData():void {
			ExternalInterface.call("audioPlayer.updateData", {
				currentBytes: player.bytesLoaded,
				totalBytes: player.bytesTotal,
				isplaying: player.playing
			});
		}
		protected function fireEvent(name:String):void {
			ExternalInterface.call("audioPlayer.updateData", {
				event: name
			});
		}
		protected function info(msg:*):void {
			log.text += msg.toString() + "\n";
		}
		protected function error(msg:*):void {
		}

		protected function application1_applicationCompleteHandler(event:FlexEvent):void
		{
			try {
				// javascriptとして必要なものを準備しておく。
				//				ExternalInterface.call(javascriptSetup);
				
				info("start...");
				// mp4はvideoPlayerにやらせる。
				player.addEventListener(VideoEvent.COMPLETE, function(e:VideoEvent):void {
					fireEvent("ended");
				});
				player.addEventListener(VideoEvent.STATE_CHANGE, function(e:VideoEvent):void {
					switch(e.state) {
						case "playing":
							// 開始した場合
							fireEvent("play");
							break;
						case "loading":
							// 読み込みを実行して開始できるようになった場合
							fireEvent("loadeddata");
							break;
						case "stopped":
							// 再生がとまった場合
							fireEvent("stopped");
							break;
						case "paused":
							// 中途停止した場合
							fireEvent("paused");
							break;
						case "rewinding":
							fireEvent("rewind");
							break;
					}
				});
				player.addEventListener(VideoEvent.PLAYHEAD_UPDATE, function(e:VideoEvent):void {
					updateTime();
				});
				// とりあえず、イベントを取得する必要がありそう。
				// 各メソッド
				ExternalInterface.addCallback("doPlay", function():void {
					info("play...");
					try {
						player.play();
					}
					catch(e:Error) {
					}
				});
				ExternalInterface.addCallback("doPause", function():void {
					info("pause...");
					try {
						player.pause();
					}
					catch(e:Error) {
					}
				});
				ExternalInterface.addCallback("doStop", function():void {
					info("stop...");
					try {
						player.stop();
					}
					catch(e:Error) {
					}
				});
				ExternalInterface.addCallback("setSource", function(data:String):String {
					info("src..." + data);
					player.source = data;
					player.load();
					return data;
				});
				ExternalInterface.addCallback("setCurrentTime", function(time:Number):Number {
					player.playheadTime = time;
					return player.playheadTime;
				});
				fireEvent("ready");
			}
			catch(e:Error) {
				info(e.toString());
			}
		}
	]]>
</mx:Script>

	<mx:VideoDisplay id="player" alpha="1" autoPlay="false">
	</mx:VideoDisplay>
	<mx:TextArea width="400" height="400" id="log">
	</mx:TextArea>
</mx:Application>
